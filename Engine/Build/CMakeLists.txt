CMAKE_MINIMUM_REQUIRED(VERSION 3.30)

PROJECT(DuckersEngine)


if (${DUCKERS_LOG_DATA} STREQUAL "TRUE")

     ADD_COMPILE_DEFINITIONS(_DUCKERS_LOG_DATA)
     MESSAGE(VERBOSE "DUCKERS_LOG_DATA == TRUE, adding compile defiiniton: `_DUCKERS_LOG_DATA`")

endif()

if (NOT ${DUCKERS_TARGET_PROJECT_NAME} STREQUAL "")

    SET(DUCKERS_TARGET_PATH ${CMAKE_SOURCE_DIR}/../../Projects/${DUCKERS_TARGET_PROJECT_NAME}/)
    SET(DUCKERS_TARGET_NAME ${DUCKERS_TARGET_PROJECT_NAME})

elseif(NOT ${DUCKERS_TARGET_SAMPLE_NAME} STREQUAL "")

    SET(DUCKERS_TARGET_PATH ${CMAKE_SOURCE_DIR}/../../Samples/${DUCKERS_TARGET_SAMPLE_NAME}/)
    SET(DUCKERS_TARGET_NAME ${DUCKERS_TARGET_SAMPLE_NAME})

else()

    MESSAGE(DEBUG "${DUCKERS_TARGET_PROJECT_NAME}")
    MESSAGE(DEBUG "${DUCKERS_TARGET_SAMPLE_NAME}")
    MESSAGE(FATAL_ERROR
            "Project name isn't specified, nothing to generate. "
            "Provide project name with `-DDUCKERS_TARGET_PROJECT_NAME`"
            "or sample name with `-DDUCKERS_TARGET_SAMPLE_NAME`.")

endif()

MESSAGE(VERBOSE "Generated path for project source: ${DUCKERS_TARGET_PATH}")

if (NOT EXISTS "${DUCKERS_TARGET_PATH}")

    MESSAGE(FATAL_ERROR "Directory with project source doesn't exists!")

endif()



SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/../../Bin/${DUCKERS_TARGET_NAME})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/../Lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/../Lib)




FILE(GLOB_RECURSE DUCKERS_TARGET_SOURCE_FILES ${DUCKERS_TARGET_PATH}*.cpp)

if(MSVC)
    
    ADD_EXECUTABLE(${DUCKERS_TARGET_NAME} WIN32 ${DUCKERS_TARGET_SOURCE_FILES})

else()

    ADD_EXECUTABLE(${DUCKERS_TARGET_NAME}   ${DUCKERS_TARGET_SOURCE_FILES})

endif()

TARGET_INCLUDE_DIRECTORIES(${DUCKERS_TARGET_NAME} PRIVATE "${DUCKERS_TARGET_PATH}")








SET(MODULES_LIST "")
SET(DUCKERS_MODULES_BASE_PATH ${CMAKE_SOURCE_DIR}/../Source)

FILE(GLOB DUCKERS_MODULES RELATIVE ${DUCKERS_MODULES_BASE_PATH} ${DUCKERS_MODULES_BASE_PATH}/*)
foreach(DIR ${DUCKERS_MODULES})
    
    if (NOT IS_DIRECTORY ${DUCKERS_MODULES_BASE_PATH}/${DIR})
        
        continue()

    endif()

    MESSAGE(DEBUG "Module directory: ${DUCKERS_MODULES_BASE_PATH}/${DIR}")
    FILE(GLOB_RECURSE DUCKERS_ENGINE_SOURCE_FILES ${DUCKERS_MODULES_BASE_PATH}/${DIR}/*.cpp)
    ADD_LIBRARY(${DIR} SHARED ${DUCKERS_ENGINE_SOURCE_FILES})
    LIST(APPEND MODULES_LIST ${DIR})

    TARGET_LINK_LIBRARIES(${DUCKERS_TARGET_NAME} PUBLIC ${DIR})

endforeach()








FILE(GLOB_RECURSE DUCKERS_ENGINE_HEADERS_FILES ${DUCKERS_MODULES_BASE_PATH}/*.h)

foreach(DUCKERS_HEADER_PATH ${DUCKERS_ENGINE_HEADERS_FILES})

    if (${DUCKERS_HEADER_PATH} MATCHES "Public")

        GET_FILENAME_COMPONENT(DUCKERS_HEADER_PATH ${DUCKERS_HEADER_PATH} DIRECTORY)

        MESSAGE(DEBUG "Public include directory: ${DUCKERS_HEADER_PATH}")
        
        foreach(MODULE ${MODULES_LIST})

            TARGET_INCLUDE_DIRECTORIES(${MODULE} PUBLIC "${DUCKERS_HEADER_PATH}")

        endforeach()

        TARGET_INCLUDE_DIRECTORIES(${DUCKERS_TARGET_NAME} PUBLIC "${DUCKERS_HEADER_PATH}")
        
    endif()

endforeach()









SET_PROPERTY(TARGET ${DUCKERS_TARGET_NAME} PROPERTY C_STANDARD 20)
SET_PROPERTY(TARGET ${DUCKERS_TARGET_NAME} PROPERTY CXX_STANDARD 20)

foreach(MODULE ${MODULES_LIST})

    SET_PROPERTY(TARGET ${MODULE} PROPERTY C_STANDARD 20)
    SET_PROPERTY(TARGET ${MODULE} PROPERTY CXX_STANDARD 20)

endforeach()


if(MSVC)

    foreach(MODULE ${MODULES_LIST})

        TARGET_COMPILE_OPTIONS(${MODULE} PRIVATE /W4 /WX)

    endforeach()

    TARGET_COMPILE_OPTIONS(${DUCKERS_TARGET_NAME} PRIVATE /W4 /WX)

else()

    FIND_PACKAGE(X11 REQUIRED)
    TARGET_LINK_LIBRARIES(${DUCKERS_TARGET_NAME} PRIVATE X11::X11)

    TARGET_COMPILE_OPTIONS(${DUCKERS_TARGET_NAME} PRIVATE
                           -Wall
                           -Wextra
                           -Wpedantic
                           -Werror
                           -O2)

    foreach(MODULE ${MODULES_LIST})

        TARGET_COMPILE_OPTIONS(${MODULE} PRIVATE
                               -Wall
                               -Wextra
                               -Wpedantic
                               -Werror
                               -O2)

    endforeach()

endif()


TARGET_COMPILE_DEFINITIONS(${DUCKERS_TARGET_NAME} PRIVATE
    $<$<CONFIG:Debug>:
        _DEBUG;
    >
    $<$<CONFIG:Release>:
    >
)

foreach(MODULE ${MODULES_LIST})

    TARGET_COMPILE_DEFINITIONS(${MODULE} PRIVATE
        $<$<CONFIG:Debug>:
            _DEBUG;
            _DUCKERS_API_EXPORT;
        >
        $<$<CONFIG:Release>:
            _DUCKERS_API_EXPORT;
        >
    )

endforeach()
