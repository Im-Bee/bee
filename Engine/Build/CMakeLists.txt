CMAKE_MINIMUM_REQUIRED(VERSION 3.30)

PROJECT(DuckersEngine)



if (NOT "${DUCKERS_TARGET_PROJECT_NAME}" STREQUAL "")

    SET(DUCKERS_TARGET_PATH ${CMAKE_SOURCE_DIR}/../../Projects/${DUCKERS_TARGET_PROJECT_NAME}/)
    SET(DUCKERS_TARGET_NAME ${DUCKERS_TARGET_PROJECT_NAME})

elseif(NOT "${DUCKERS_TARGET_SAMPLE_NAME}" STREQUAL "")

    SET(DUCKERS_TARGET_PATH ${CMAKE_SOURCE_DIR}/../../Samples/${DUCKERS_TARGET_SAMPLE_NAME}/)
    SET(DUCKERS_TARGET_NAME ${DUCKERS_TARGET_SAMPLE_NAME})

else()

    MESSAGE(DEBUG "${DUCKERS_TARGET_PROJECT_NAME}")
    MESSAGE(DEBUG "${DUCKERS_TARGET_SAMPLE_NAME}")
    MESSAGE(FATAL_ERROR
            "Project name isn't specified, nothing to generate. "
            "Provide project name with `-DDUCKERS_TARGET_PROJECT_NAME`"
            "or sample name with `-DDUCKERS_TARGET_SAMPLE_NAME`.")

endif()

MESSAGE(VERBOSE "Generated path for project source: ${DUCKERS_TARGET_PATH}")

if (NOT EXISTS "${DUCKERS_TARGET_PATH}")

    MESSAGE(FATAL_ERROR "Directory with project source doesn't exists!")

endif()



SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/../../Bin/${DUCKERS_TARGET_NAME})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/../Lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/../Lib)




FILE(GLOB_RECURSE DUCKERS_TARGET_SOURCE_FILES ${DUCKERS_TARGET_PATH}*.cpp)

if(MSVC)
    
    ADD_EXECUTABLE(${DUCKERS_TARGET_NAME} WIN32 ${DUCKERS_TARGET_SOURCE_FILES})

else()

    ADD_EXECUTABLE(${DUCKERS_TARGET_NAME}   ${DUCKERS_TARGET_SOURCE_FILES})

endif()

TARGET_INCLUDE_DIRECTORIES(${DUCKERS_TARGET_NAME} PRIVATE "${DUCKERS_TARGET_PATH}")




FILE(GLOB_RECURSE DUCKERS_ENGINE_SOURCE_FILES ${CMAKE_SOURCE_DIR}/../Source/*.cpp)
ADD_LIBRARY(${PROJECT_NAME} ${DUCKERS_ENGINE_SOURCE_FILES})





FILE(GLOB_RECURSE DUCKERS_ENGINE_HEADERS_FILES ${CMAKE_SOURCE_DIR}/../Source/*.h)

foreach(DUCKERS_HEADER_PATH ${DUCKERS_ENGINE_HEADERS_FILES})

    if (${DUCKERS_HEADER_PATH} MATCHES "Public")

        GET_FILENAME_COMPONENT(DUCKERS_HEADER_PATH ${DUCKERS_HEADER_PATH} DIRECTORY)

        MESSAGE(DEBUG "Public include directory: ${DUCKERS_HEADER_PATH}")

        TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC "${DUCKERS_HEADER_PATH}")
        TARGET_INCLUDE_DIRECTORIES(${DUCKERS_TARGET_NAME} PUBLIC "${DUCKERS_HEADER_PATH}")
        
    endif()

endforeach()





TARGET_LINK_LIBRARIES(${DUCKERS_TARGET_NAME} PUBLIC ${PROJECT_NAME})







SET_PROPERTY(TARGET ${DUCKERS_TARGET_NAME} PROPERTY C_STANDARD 20)
SET_PROPERTY(TARGET ${DUCKERS_TARGET_NAME} PROPERTY CXX_STANDARD 20)
SET_PROPERTY(TARGET ${PROJECT_NAME}        PROPERTY C_STANDARD 20)
SET_PROPERTY(TARGET ${PROJECT_NAME}        PROPERTY CXX_STANDARD 20)


if(MSVC)

    TARGET_COMPILE_OPTIONS(${PROJECT_NAME}        PRIVATE /W4 /WX)
    TARGET_COMPILE_OPTIONS(${DUCKERS_TARGET_NAME} PRIVATE /W4 /WX)

else()

    FIND_PACKAGE(X11 REQUIRED)
    TARGET_LINK_LIBRARIES(${DUCKERS_TARGET_NAME} PRIVATE X11::X11)

    TARGET_COMPILE_OPTIONS(${DUCKERS_TARGET_NAME} PRIVATE
                           -Wall
                           -Wextra
                           -Wpedantic
                           -Werror)

    TARGET_COMPILE_OPTIONS(${PROJECT_NAME} PRIVATE
                           -Wall
                           -Wextra
                           -Wpedantic
                           -Werror)

endif()

TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME} PRIVATE
    $<$<CONFIG:Debug>:
        _DEBUG
        _DUCKERS_API_EXPORT
    >
    $<$<CONFIG:Release>:
        _DUCKERS_API_EXPORT
    >
)
